
# Task 2: Batch Pokémon Data Retrieval

# Define the list of Pokémon
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Define the directory for storing data and error logs
DATA_DIR="Advanced_shell"
ERROR_FILE="$DATA_DIR/error_log.txt"

# Main loop to process each Pokémon
for POKEMON in "${POKEMONS[@]}"; do
  OUTPUT_FILE="$DATA_DIR/$POKEMON.json"

    # Define the API URL and output file
    API_URL="https://pokeapi.co/api/v2/pokemon/$POKEMON"
    OUTPUT_FILE="Advanced_shell/$POKEMON.json"

    # Retrieve data from the API
    response=$(curl -s "$API_URL")

    # Save the response to a file
    echo "$response" > "$OUTPUT_FILE"

    # Check if the request was successful (example: check if the file is not empty)
    if [ -s "$OUTPUT_FILE" ]; then
        echo "Data for $POKEMON successfully retrieved and saved to $OUTPUT_FILE."
    else
        echo "Error: Failed to retrieve data for $POKEMON."
    fi

    # Add a delay to avoid rate-limiting (1 second)
    sleep 1
done

#!/bin/bash

# Task 4: Error Handling and Retry Logic

# Function to retrieve Pokémon data with retry logic
get_pokemon_data() {
  local pokemon="$1"
  local output_file="$2"
  local api_url="https://pokeapi.co/api/v2/pokemon/$pokemon"
  local max_retries=3
  local retry_delay=2  # seconds

  for attempt in $(seq 1 "$max_retries"); do
    echo "Attempting to retrieve data for $pokemon (Attempt $attempt/$max_retries)"
    response=$(curl -s -w "%{http_code}" -o "$output_file" "$api_url")
    http_code=$(echo "$response" | tail -n 1) # Extract HTTP code

    if [ "$http_code" -eq 200 ]; then
      echo "Data for $pokemon successfully retrieved and saved to $output_file."
      return 0  # Success
    else
      echo "Error: Failed to retrieve data for $pokemon (Attempt $attempt/$max_retries). HTTP Status Code: $http_code"
      if [ "$attempt" -lt "$max_retries" ]; then
        echo "Retrying in $retry_delay seconds..."
        sleep "$retry_delay"
      fi
    fi
  done

  # If all retries failed, log the error
  echo "Failed to retrieve data for $pokemon after $max_retries attempts." >> "$ERROR_FILE"
  return 1  # Failure
}

  if ! get_pokemon_data "$POKEMON" "$OUTPUT_FILE"; then
    echo "Skipping $POKEMON due to persistent errors."
  fi
